import React, { useContext } from 'react';
import MUIDataTable from 'mui-datatables';
import IconButton from '@material-ui/core/IconButton';
import DetailsIcon from '@material-ui/icons/Details';
import DeleteIcon from '@material-ui/icons/Delete';
import {
  Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, TextField, Typography
} from '@material-ui/core';
import { makeStyles } from '@material-ui/core/styles';
import { connect } from 'react-redux';
import CustomToolbar from '../../../../components/CustomToolbar/CustomToolbar';
import PurchaseOrderAcceptanceService from '../../../Services/PurchaseOrderAcceptanceService';
import { ThemeContext } from '../../../App/ThemeWrapper';
import notification from '../../../../components/Notification/Notification';
import IvaService from '../../../Services/IvaService';
import ContractStatusService from '../../../Services/ContractStatusService';

const useStyles = makeStyles();

class PurchaseOrderBlock extends React.Component {
  constructor(props) {
    super(props);
    const thelogedUser = JSON.parse(this.props.logedUser);
    this.state = {
      openPopUpDelete: false,
      purchaseOrderAcceptanceOrderToDelete: '',
      purchaseOrderAcceptanceCodeToDelete: '',
      purchaseOrderAcceptanceId: '',
      generatedPurchase: '',
      adminAcceptance: '',
      operationalAcceptance: '',
      openPopUp: false,
      datas: [],
      row: [],
      columns: [
        {
          label: 'Generated By',
          name: 'generatedPurchase',
          options: {
            filter: true
          }
        },
        {
          label: 'Administration Acceptance',
          name: 'adminAcceptance',
          options: {
            filter: true
          }
        },
        {
          label: 'Operational Acceptance',
          name: 'operationalAcceptance',
          options: {
            filter: true
          }
        },
        {
          label: 'Actions',
          name: 'Actions',
          options: {
            filter: false,
            sort: false,
            empty: true,
            customBodyRender: (value, tableMeta) => (
              <React.Fragment>
                {thelogedUser.userRoles[0].actionsNames.financialModule_purchaseOrderAcceptance_access ? (
                  <IconButton onClick={() => this.handleDetails(tableMeta)}>
                    <DetailsIcon color="secondary" />
                  </IconButton>
                ) : null}
                {thelogedUser.userRoles[0].actionsNames.financialModule_purchaseOrderAcceptance_delete ? (
                  <IconButton onClick={() => this.handleDelete(tableMeta)}>
                    <DeleteIcon color="primary" />
                  </IconButton>
                ) : null}
              </React.Fragment>
            )
          }
        }
      ]
    };
  }

  componentDidMount() {
    PurchaseOrderAcceptanceService.getPurchaseOrderAcceptance().then(result => {
      this.setState({ datas: result.data });
    });
    const {
      // eslint-disable-next-line react/prop-types
      changeTheme
    } = this.props;
    changeTheme('greyTheme');
  }

    // eslint-disable-next-line react/sort-comp
    handleDetails = (tableMeta) => {
      const index = tableMeta.tableState.page * tableMeta.tableState.rowsPerPage
            + tableMeta.rowIndex;
        // eslint-disable-next-line react/destructuring-assignment,react/no-access-state-in-setstate
      const id = this.state.datas[index].purchaseOrderAcceptanceId;
      PurchaseOrderAcceptanceService.getPurchaseOrderAcceptanceById(id).then(result => {
        this.setState({
          purchaseOrderAcceptanceId: id,
          generatedPurchase: result.data.generatedPurchase,
          adminAcceptance: result.data.adminAcceptance,
          operationalAcceptance: result.data.operationalAcceptance,
          openPopUp: true
        });
      });
    }

    handleDelete = (tableMeta) => {
      const { datas } = this.state;
      const index = tableMeta.tableState.page * tableMeta.tableState.rowsPerPage
            + tableMeta.rowIndex;
      this.setState({
        openPopUpDelete: true,
        purchaseOrderAcceptanceOrderToDelete: datas[index].purchaseOrderAcceptanceId,
        purchaseOrderAcceptanceCodeToDelete: datas[index].statusCode
      });
    };

  deleteConfirme = () => {
    const { purchaseOrderAcceptanceOrderToDelete, purchaseOrderAcceptanceCodeToDelete } = this.state;
    if (purchaseOrderAcceptanceCodeToDelete !== 10) {
      PurchaseOrderAcceptanceService.deletePurchaseOrderAcceptance(purchaseOrderAcceptanceOrderToDelete).then(result => {
        if (result.status === 200) {
          notification('success', 'contract status deleted');
          PurchaseOrderAcceptanceService.getPurchaseOrderAcceptance().then(result1 => {
            this.setState({ datas: result1.data });
          });
        }
      }).catch(err => notification('danger', err.response.data.errors));
    } else {
      notification('danger', 'you cant delete contract status with code = 10');
    }
    this.setState({ openPopUpDelete: false });
  }

    handleClose = () => {
      this.setState({ openPopUp: false, openWarning: false });
    };

    handleSave = () => {
      const {
        purchaseOrderAcceptanceId, generatedPurchase, adminAcceptance, operationalAcceptance
      } = this.state;
      const PurchaseOrderAcceptance = {
        purchaseOrderAcceptanceId, generatedPurchase, adminAcceptance, operationalAcceptance
      };
      PurchaseOrderAcceptanceService.updatePurchaseOrderAcceptance(PurchaseOrderAcceptance).then(result => {
        if (result.status === 200) {
          notification('success', 'Purchase orderAcceptance updated');
          PurchaseOrderAcceptanceService.getPurchaseOrderAcceptance().then(result2 => {
            this.setState({ datas: result2.data, openPopUp: false });
          });
        }
      })
        .catch(err => notification('danger', err.response.data.errors));
      this.setState({ openPopUp: false });
    };

    handleChange = (ev) => {
      this.setState({ [ev.target.name]: ev.target.value });
    };

  handleCloseDelete = () => {
    this.setState({ openPopUpDelete: false });
  };

    render() {
      const {
        columns, openPopUp, datas, generatedPurchase, adminAcceptance, operationalAcceptance, openPopUpDelete
      } = this.state;
      const {
        logedUser
      } = this.props;
      const thelogedUser = JSON.parse(logedUser);
      let exportButton = false;
      if (thelogedUser.userRoles[0].actionsNames.financialModule_purchaseOrderAcceptance_export) {
        exportButton = true;
      }

      const excludeAttributes = ['purchaseOrderAcceptanceId']
      const options = {
        filter: true,
        selectableRows: false,
        filterType: 'dropdown',
        responsive: 'stacked',
        download: exportButton,
        downloadOptions: { filename: 'Purchase order acceptance.csv' },
        print: exportButton,
        rowsPerPage: 10,
        customToolbar: () => (
          <CustomToolbar
            csvData={datas}
            url="/app/gestion-financial/Add Purchase-Acceptance"
            tooltip="add New Purchase Order"
            fileName="Purchase order acceptance"
            excludeAttributes={excludeAttributes}
            hasAddRole={thelogedUser.userRoles[0].actionsNames.financialModule_purchaseOrderAcceptance_create}
            hasExportRole={thelogedUser.userRoles[0].actionsNames.financialModule_purchaseOrderAcceptance_export}
          />
        )
      };

      return (
        <div>
          <MUIDataTable
            title="The Purchase Order Acceptance List"
            data={datas}
            columns={columns}
            options={options}
          />
          <Dialog
            open={openPopUp}
            keepMounted
            scroll="paper"
            onClose={this.handleClose}
            aria-labelledby="alert-dialog-slide-title"
            aria-describedby="alert-dialog-slide-description"
            fullWidth="md"
            maxWidth="md"
          >
            <DialogTitle id="alert-dialog-slide-title"> View Details</DialogTitle>
            <DialogContent dividers>
              <div>
                <Grid
                  container
                  spacing={2}
                  alignItems="flex-start"
                  direction="row"
                  justify="center"
                >
                  <Grid item xs={12} md={6}>
                    <TextField
                      id="generatedPurchase"
                      label="Purchase Order Generated By"
                      variant="outlined"
                      name="generatedPurchase"
                      value={generatedPurchase}
                      required
                      fullWidth
                      onChange={this.handleChange}
                    />
                    <br />
                    <br />
                    <TextField
                      id="adminAcceptance"
                      label="Administration Acceptance By"
                      variant="outlined"
                      name="adminAcceptance"
                      value={adminAcceptance}
                      fullWidth
                      onChange={this.handleChange}
                    />
                    <br />
                    <br />
                    <TextField
                      id="operationalAcceptance"
                      label="Operational Acceptance By"
                      variant="outlined"
                      name="operationalAcceptance"
                      value={operationalAcceptance}
                      fullWidth
                      onChange={this.handleChange}
                    />
                  </Grid>
                </Grid>
              </div>
            </DialogContent>
            <DialogActions>
              <Button color="secondary" onClick={this.handleClose}>
                            Cancel
              </Button>
              {thelogedUser.userRoles[0].actionsNames.financialModule_purchaseOrderAcceptance_modify ? (
                <Button
                  variant="contained"
                  color="primary"
                  onClick={this.handleSave}
                >
                            save
                </Button>
              ) : null}
            </DialogActions>
          </Dialog>
          <Dialog
            open={openPopUpDelete}
            keepMounted
            scroll="body"
            aria-labelledby="alert-dialog-slide-title"
            aria-describedby="alert-dialog-slide-description"
            fullWidth={false}
            maxWidth="md"
          >
            <DialogTitle id="alert-dialog-slide-title"> Delete purchase order acceptance </DialogTitle>
            <DialogContent dividers>
              Are you sure you want to delete this purchase order acceptance ?
            </DialogContent>
            <DialogActions>
              <Button color="secondary" onClick={this.handleCloseDelete}>
                Cancel
              </Button>
              <Button
                variant="contained"
                color="primary"
                onClick={this.deleteConfirme}
              >
                Delete
              </Button>
            </DialogActions>
          </Dialog>
        </div>
      );
    }
}
const mapStateToProps = () => ({
  logedUser: localStorage.getItem('logedUser')
});
const PurchaseOrderMapped = connect(
  mapStateToProps,
  null
)(PurchaseOrderBlock);

export default () => {
  const { changeTheme } = useContext(ThemeContext);
  const classes = useStyles();
  return <PurchaseOrderMapped changeTheme={changeTheme} classes={classes} />;
};
